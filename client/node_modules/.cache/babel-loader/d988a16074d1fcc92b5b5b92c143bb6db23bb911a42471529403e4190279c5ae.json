{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\uday kiran\\\\Desktop\\\\Peppo\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [prompt, setPrompt] = useState('');\n  const [videoUrl, setVideoUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // Use a ref to store the interval ID\n  const pollIntervalRef = useRef(null);\n\n  // Function to check the status of the video generation\n  const checkStatus = async taskId => {\n    try {\n      const response = await fetch(`/api/status/${taskId}`);\n      const data = await response.json();\n      if (data.status === 'completed') {\n        clearInterval(pollIntervalRef.current); // Stop polling\n        setVideoUrl(data.videoUrl);\n        setIsLoading(false);\n      } else if (data.status === 'failed') {\n        clearInterval(pollIntervalRef.current); // Stop polling\n        setError('Video generation failed. Please try again.');\n        setIsLoading(false);\n      }\n      // If status is 'processing', we do nothing and let the interval continue\n    } catch (err) {\n      clearInterval(pollIntervalRef.current); // Stop polling on error\n      setError('An error occurred while checking status.');\n      setIsLoading(false);\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    setVideoUrl('');\n    setIsLoading(true);\n\n    // Clear any existing interval\n    if (pollIntervalRef.current) {\n      clearInterval(pollIntervalRef.current);\n    }\n    try {\n      // 1. Start the generation process\n      const response = await fetch('/api/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to start generation.');\n      }\n      const data = await response.json();\n      const {\n        taskId\n      } = data;\n\n      // 2. Start polling for the result\n      pollIntervalRef.current = setInterval(() => {\n        checkStatus(taskId);\n      }, 5000); // Poll every 5 seconds\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"AI Video Generator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter a prompt to create a short video.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"prompt-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: prompt,\n          onChange: e => setPrompt(e.target.value),\n          placeholder: \"e.g., a corgi riding a skateboard in a futuristic city\",\n          required: true,\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading,\n          children: isLoading ? 'Generating...' : 'Generate'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Generating video... This can take a minute or two.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 19\n      }, this), videoUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Generated Video:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          src: videoUrl,\n          controls: true,\n          autoPlay: true,\n          loop: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1fjwPuK68P6TFUXyCTc0fnZEYR4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","App","_s","prompt","setPrompt","videoUrl","setVideoUrl","isLoading","setIsLoading","error","setError","pollIntervalRef","checkStatus","taskId","response","fetch","data","json","status","clearInterval","current","err","handleSubmit","e","preventDefault","method","headers","body","JSON","stringify","ok","Error","setInterval","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","disabled","src","controls","autoPlay","loop","_c","$RefreshReg$"],"sources":["C:/Users/uday kiran/Desktop/Peppo/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [prompt, setPrompt] = useState('');\n  const [videoUrl, setVideoUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  \n  // Use a ref to store the interval ID\n  const pollIntervalRef = useRef(null);\n\n  // Function to check the status of the video generation\n  const checkStatus = async (taskId) => {\n    try {\n      const response = await fetch(`/api/status/${taskId}`);\n      const data = await response.json();\n\n      if (data.status === 'completed') {\n        clearInterval(pollIntervalRef.current); // Stop polling\n        setVideoUrl(data.videoUrl);\n        setIsLoading(false);\n      } else if (data.status === 'failed') {\n        clearInterval(pollIntervalRef.current); // Stop polling\n        setError('Video generation failed. Please try again.');\n        setIsLoading(false);\n      }\n      // If status is 'processing', we do nothing and let the interval continue\n    } catch (err) {\n      clearInterval(pollIntervalRef.current); // Stop polling on error\n      setError('An error occurred while checking status.');\n      setIsLoading(false);\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    setVideoUrl('');\n    setIsLoading(true);\n\n    // Clear any existing interval\n    if (pollIntervalRef.current) {\n      clearInterval(pollIntervalRef.current);\n    }\n\n    try {\n      // 1. Start the generation process\n      const response = await fetch('/api/generate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ prompt }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to start generation.');\n      }\n\n      const data = await response.json();\n      const { taskId } = data;\n\n      // 2. Start polling for the result\n      pollIntervalRef.current = setInterval(() => {\n        checkStatus(taskId);\n      }, 5000); // Poll every 5 seconds\n\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>AI Video Generator</h1>\n        <p>Enter a prompt to create a short video.</p>\n      </header>\n      <main>\n        <form onSubmit={handleSubmit} className=\"prompt-form\">\n          <input\n            type=\"text\"\n            value={prompt}\n            onChange={(e) => setPrompt(e.target.value)}\n            placeholder=\"e.g., a corgi riding a skateboard in a futuristic city\"\n            required\n            disabled={isLoading}\n          />\n          <button type=\"submit\" disabled={isLoading}>\n            {isLoading ? 'Generating...' : 'Generate'}\n          </button>\n        </form>\n\n        {isLoading && (\n          <div className=\"loading-container\">\n            <div className=\"spinner\"></div>\n            <p>Generating video... This can take a minute or two.</p>\n          </div>\n        )}\n\n        {error && <p className=\"error-message\">{error}</p>}\n\n        {videoUrl && (\n          <div className=\"video-container\">\n            <h2>Your Generated Video:</h2>\n            <video src={videoUrl} controls autoPlay loop />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}